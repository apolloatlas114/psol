const socket = io('https://psolgame.herokuapp.com');

let players = {};
let food = [];
let projectiles = [];
let myId;
let camera = { x: 0, y: 0, zoom: 1 };
let gameState = 'menu';
let username = '';
let wallet = 0;

socket.on('connect', () => {
    console.log('Connected to server');
});

socket.on('gameState', (state) => {
    players = state.players;
    food = state.food;
    projectiles = state.projectiles;
    myId = socket.id;
    gameState = 'playing';
});

socket.on('updateState', (state) => {
    players = state.players;
    food = state.food;
    projectiles = state.projectiles;
});

socket.on('playerEaten', (id) => {
    if (id === myId) {
        gameState = 'gameOver';
    }
    delete players[id];
});

function setup() {
    createCanvas(windowWidth, windowHeight);
}

function draw() {
    background(0);
    if (gameState === 'menu') {
        drawMenu();
    } else if (gameState === 'playing') {
        updateCamera();
        drawGame();
    } else if (gameState === 'gameOver') {
        drawGameOver();
    }
}

function drawMenu() {
    fill(255);
    textAlign(CENTER, CENTER);
    textSize(32);
    text('SolGame', width / 2, height / 3);
    textSize(16);
    text('Enter username and click to play', width / 2, height / 2);
    
    if (!input) {
        input = createInput(username);
        input.position(width / 2 - 100, height / 2 + 40);
    }
    
    if (!button) {
        button = createButton('Play');
        button.position(width / 2 - 30, height / 2 + 70);
        button.mousePressed(startGame);
    }
}

function startGame() {
    username = input.value();
    input.remove();
    button.remove();
    input = null;
    button = null;
    socket.emit('joinGame', username);
}

function updateCamera() {
    if (players[myId]) {
        let player = players[myId];
        camera.x = lerp(camera.x, player.x - width / 2, 0.1);
        camera.y = lerp(camera.y, player.y - height / 2, 0.1);
        camera.zoom = lerp(camera.zoom, 30 / player.size, 0.1);
    }
}

function drawGame() {
    push();
    translate(width / 2, height / 2);
    scale(camera.zoom);
    translate(-camera.x, -camera.y);

    // Draw food
    fill(255, 0, 0);
    for (let f of food) {
        ellipse(f.x, f.y, 10, 10);
    }

    // Draw players
    for (let id in players) {
        let p = players[id];
        fill(id === myId ? color(0, 255, 0) : color(255));
        ellipse(p.x, p.y, p.size * 2, p.size * 2);
        fill(0);
        textAlign(CENTER, CENTER);
        textSize(p.size / 2);
        text(p.username, p.x, p.y);
    }

    // Draw projectiles
    fill(0, 0, 255);
    for (let proj of projectiles) {
        ellipse(proj.x, proj.y, 10, 10);
    }

    pop();

    drawLeaderboard();
    drawWallet();
}

function drawLeaderboard() {
    let sortedPlayers = Object.values(players).sort((a, b) => b.score - a.score);
    fill(255);
    textAlign(LEFT, TOP);
    textSize(16);
    text('Leaderboard', 10, 10);
    for (let i = 0; i < Math.min(5, sortedPlayers.length); i++) {
        text(`${i + 1}. ${sortedPlayers[i].username}: ${sortedPlayers[i].score}`, 10, 30 + i * 20);
    }
}

function drawWallet() {
    fill(255);
    textAlign(RIGHT, TOP);
    textSize(16);
    text(`Wallet: ${wallet} SOL`, width - 10, 10);
}

function drawGameOver() {
    fill(255);
    textAlign(CENTER, CENTER);
    textSize(32);
    text('Game Over', width / 2, height / 3);
    textSize(16);
    text(`Final Score: ${players[myId] ? players[myId].score : 0}`, width / 2, height / 2);
    text('Click to play again', width / 2, height * 2 / 3);
}

function mouseMoved() {
    if (gameState === 'playing' && players[myId]) {
        let player = players[myId];
        let dx = (mouseX - width / 2) / camera.zoom + camera.x - player.x;
        let dy = (mouseY - height / 2) / camera.zoom + camera.y - player.y;
        socket.emit('move', { dx, dy });
    }
}

function keyPressed() {
    if (gameState === 'playing') {
        if (key === ' ') {
            socket.emit('split');
        } else if (key === 'w' || key === 'W') {
            let dx = mouseX - width / 2;
            let dy = mouseY - height / 2;
            socket.emit('shoot', { dx, dy });
        }
    } else if (gameState === 'gameOver' && keyCode === ENTER) {
        startGame();
    }
}

function mousePressed() {
    if (gameState === 'gameOver') {
        startGame();
    }
}

function windowResized() {
    resizeCanvas(windowWidth, windowHeight);
}
